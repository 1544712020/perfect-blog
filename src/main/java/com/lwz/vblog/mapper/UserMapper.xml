<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lwz.vblog.mapper.UserMapper">

    <!-- 通过username加载用户信息· -->
    <select id="loadUserByName" resultType="user">
        select * from user where username = #{username}
    </select>

    <!-- 添加用户 -->
    <insert id="reg" useGeneratedKeys="true" keyProperty="id">
        insert into user set username=#{username},password=#{password},nickname=#{nickname};
    </insert>

    <!-- 通过用户id更新用户电子邮件 -->
    <update id="updateUserEmail">
        update user set email = #{email} where id = #{id}
    </update>

    <!-- 获取所有用户角色 -->
    <select id="getAllRole" resultType="role">
        select * from roles;
    </select>

    <!-- 通过用户id更新用户的权限 -->
    <update id="updateUserEnabled">
        update user set enabled = #{enabled} where id = #{uid}
    </update>

    <!-- 通过id删除用户 -->
    <delete id="deleteUserById">
        delete from user where id = #{id}
    </delete>

    <!-- 通过id删除用户角色 -->
    <delete id="deleteUserRolesByUid">
        delete from roles_user where uid = #{id}
    </delete>

    <!-- 通过用户id设置用户角色 -->
    <insert id="setUserRoles">
        insert into roles_user(rid, uid) values
        <foreach collection="rids" separator="," item="rid">
            (#{rid},#{id})
        </foreach>
    </insert>

    <!-- 通过id获取用户 -->
    <select id="getUserById" resultMap="BaseResultMap">
        SELECT
        u.*,
        r.`id` AS rid,
        r.`name` AS rname
        FROM
        user u,
        roles r,
        roles_user ru
        WHERE
        u.`id`=ru.`uid` AND
        r.`id`=ru.`rid` AND
        u.`id`=#{id}
    </select>

    <!-- 通过用户昵称获取用户信息的NOT IN过滤条件是除去超级用户管理员 -->
    <!-- 通过用户昵称获取用户信息-->
    <!--    当用户昵称不为空时使用用户昵称检索用户信息-->
    <!--    当用户昵称为空时通过用户id来排列获取前20个用户-->
    <select id="getUserByNickname" resultMap="BaseResultMap">
        SELECT
        u.*,
        r.`id` AS rid,
        r.`name` AS rname
        FROM
        user u,
        roles r,
        roles_user ru
        WHERE
        u.`id`=ru.`uid`
        AND
        r.`id`=ru.`rid`
        AND
        u.`id`
        NOT IN (SELECT u.`id` FROM user u,roles_user ru WHERE u.`id`=ru.`uid` AND ru.`rid`=1)
        <choose>
            <when test="nickname!=null and nickname!=''">
                and u.nickname like concat('%',#{nickname},'%') ORDER BY u.`id`
            </when>
            <otherwise>
                ORDER BY u.`id` limit 20
            </otherwise>
        </choose>
    </select>
    <resultMap id="BaseResultMap" type="user">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="nickname" property="nickname"/>
        <result column="password" property="password"/>
        <result column="enabled" property="enabled"/>
        <result column="email" property="email"/>
        <result column="userface" property="userface"/>
        <result column="regTime" property="regTime"/>
        <collection property="roles" ofType="role">
            <id column="rid" property="id"/>
            <result column="rname" property="name"/>
        </collection>
    </resultMap>

</mapper>
